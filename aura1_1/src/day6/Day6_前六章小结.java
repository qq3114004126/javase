/*
 * 一、变量、常量
 * 变量的类型：按照两种角度
 * 数据类型：基本类型变量，引用类型变量
 * 身份角度：局部变量，成员变量
 * 
 * 常量：本身也是变量，除非拿final关键字限制。习惯上声明成全部字母大写。
 * 
 * 变量的赋值： 变量类型   变量名 = 变量值。
 * 理解：变量值赋予给变量名。。（右向左）
 * 
 * 
 * 二、数据类型
 * 分为两种：
 * 基本数据类型
 * 引用类型
 * 1. 基本数据类型
 * 8种类型每个的占用数据位不同，有大小的区别
 * byte  char  short  int(常用)  long  float  double（常用）     boolean（常用）
 * 
 *  原码、反码、补码
 *  正数：二进制
 *  负数：原码（正数的原码符号位取1），反码（原码符号位不变，其余取反），补码（反码+1）
 *  计算机中的存储都是以补码形式存储。
 *  
 *  整数类型  short  int(常用)  long
 *  四个进制：二进制、八进制、十进制、十六进制
 *  进制之间的转换（乘幂法，下除取余）
 *  
 *  浮点类型： float  double
 *  浮点类型的不精确。避免的操作。
 *  
 *  基本数据类型的内存结构（局部变量）
 *  变量名被存成数据域的名字，数据域中真正存储的是基本类型的数值。——栈中。
 *  
 *  基本类型之间的转换
 *  自动转换：低类型赋值给高类型
 *  强制转换：高类型赋值给低类型
 *  
 *  类型的提升：不同类型的数据进行运算之后结果：
 *  相同类型的数值之间进行运算，结果取原操作数的类型；
 *  不同类型数值之间的运算，结果取高级别的操作数类型
 *  short< int <long <float <double
 *  其中 byte char short之间运算取int
 *  
 *  
 *  2.引用类型String
 *  （1）字符串的定义
 *  使用= 和""定义字符串会在字符串常量池中创建。
 *  使用new关键字创建的字符串会创建到堆中。
 *  
 *  （2）+ ==
 *  （3）操作 方法。
 *  
 *  
 *  三、运算符
 *  算术运算符  +-*除   %    ++  --  （前置和后置）   三目运算符
 *  关系运算符 <  >  主要==
 *             == 如果是基本数据类型，则比较的是值 ；如果是引用类型，比较的是地址
 *  逻辑运算符 &&  ||   !   短路   !>&&>||
 *  赋值运算符=  +=...
 *  位运算符 <<乘法   >> 除法
 *  
 *   四、流程控制
 *   1. 选择
 *    两种结构
 *     if  else if 多个   else
 *     switch  case
 *   
 *   2. 循环
 *    while
 *    do while（可以了解）
 *    for
 *    增强for
 *    
 *    
 *   五、数组
 *   1. 声明、初始化
 *   【规则】
 *   int []  t=new int[5];
 *   int [] t=new int[]{.....}
 *   int [] t={....}(简洁)
 *   
 *   2. 访问
 *   数组名字[index]
 *   index  0   length-1
 *  
 *  3. 数组结构
 *  引用类型  数组的名字就是数据域的名字，数据域真正存储的是数组在堆中地址。
 *  
 *  4.数组的遍历、排序（冒泡、选择）
 *  
 *  5.高维数组
 *  二维
 *  int [][] t={{1,20},{3,5}}
 *  
 *  内存结构：每个数组元素在堆中，指向了另外一个数组的地址
 *  
 *  数组的复制（暂时可以先了解）
 *  
 *  6.Arrays工具类，是用来专门处理数组
 *  
 *  六、类和对象
 *  1. 概念
 *  对象：属性、行为
 *  类：对象划分的类型
 *  
 *  2.创建类和初始化类
 *  修饰符  class 类名{
 *  }
 *  
 *  产生对象：
 *  new 构造器()
 *  
 *  如果对象只声明引用，没有创建对象，默认是null
 *  T t;
 *  
 *  3.类的成员
 *  几个成员：
 *  属性：静态属性（静态变量）、非静态属性（成员变量）
 *  行为：静态方法，非静态方法
 *  块：静态块，实例块
 *  构造器
 * 
 *  （1）非静态属性（成员变量）
 *  访问：对象名.属性名（在其他的类，main中）
 *      this.属性名（在当前类中）
 *  （2）方法
 *  访问：对象名.方法名(参数)
 *  方法可以有返回值：return   返回值类型
 *  方法的重载：
 *     名字相同，参数不同。
 *     返回值不同不算重载
 *  
 *  对象中属性和方法的内存图：属性是每个对象都有一份数据，方法是多个对象公用的，
 *                     存储在方法区，当前对象中只存储方法的引用
 *  
 *  值传递：
 *  无论什么传递，都是将数据域中内容传递出去。
 *  基本数据类型：传值（复制一份数据的值）
 *  引用数据类型：传地址
 *  
 *  （3）构造器
 *  功能：用来创建对象。
 *  当类中没有定义任何构造器的时候，编译器会创建一个无参数构造器。
 *  如果类中显式的定义了有参数构造器，则原无参数构造器失效，需要显式声明。
 *  
 *  构造器的重载
 *  构造器调用构造器：
 *  规则：this   第一个行    不能在构造器外使用
 *  
 *  this关键字：两种用法
 *     代表当前对象：在方法中调用其他方法或者属性
 *     在构造器调用构造器的时候。
 *     
 *  （4） 静态成员
 *     都是跟类有关，跟对象无关
 *     所以访问时：类名.属性名（方法名）
 *       
 *     静态属性
 *     静态方法：只能访问静态的属性和其他静态方法。
 *     
 *     静态块：在类加载的时候，会执行一次。
 *     
 *  （5）实例块：在创建对象的时候，会执行一次
 *      
 *      成员变量的初始化（本质上都是在构造器中执行的，只不过最后执行构造器中的内容而已）：
 *         声明的同时初始化
 *         实例块中初始化
 *         构造器中初始化
 *         顺序：声明和实例块谁在前面谁先执行，最后执行构造器
 *     
 *     
 * 
 * */
